package com.pack;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.PriorityQueue;import java.util.Queue;import java.util.Scanner;import java.util.function.Function;import java.util.function.ToDoubleFunction;import java.util.function.ToIntFunction;import java.util.function.ToLongFunction;import javax.swing.text.html.HTMLDocument.Iterator;public class Knn {		String filePath_train = "/home/aishwarya/1-umn/dm/projects/project3/project_3/rep1/mnist_train.csv";	String filePath_test = "/home/aishwarya/1-umn/dm/projects/project3/project_3/rep1/mnist_test.csv";	String filePath_validation = "/home/aishwarya/1-umn/dm/projects/project3/project_3/rep1/mnist_validation.csv";		HashMap<Integer, Point> pointIDsTrain = new HashMap<Integer, Point>();	HashMap<Integer, Point> pointIDsValidation = new HashMap<Integer, Point>();	HashMap <Integer, PointDistance[]> closestPoints = new HashMap<Integer, PointDistance[]>();	int kVals = 5;	public static void main(String[] args) {		Knn k = new Knn();		k.readData();		k.closestPoints();		k.findBestK();	}		public void findBestK() {		double accuracy = 0;		int bestK = 0;		int pointID = 0;		int max = 0;		int label;		int correct = 0;		FrequentLabel[] freqarr;		HashMap<Integer, Integer> frequency = new HashMap<Integer, Integer>();		for(int k = 1; k <= kVals; k++) {			//max = 0;						freqarr = new FrequentLabel[10];			for(int i = 0; i < 10; i++)				freqarr[i] = new FrequentLabel();						correct = 0;						for(int key : closestPoints.keySet()) {								for(int i = 0; i < k; i++) {					//System.out.println("######0-9 = " + pointIDsTrain.get(closestPoints.get(key)[i].id).label);					freqarr[pointIDsTrain.get(closestPoints.get(key)[i].id).label].frequency++;					freqarr[pointIDsTrain.get(closestPoints.get(key)[i].id).label].label = pointIDsTrain.get(closestPoints.get(key)[i].id).label;				}								System.out.println("before sort = " +freqarr[0].label + "freq" +freqarr[0].frequency);				Arrays.sort(freqarr, new Comparator<FrequentLabel>() {					public int compare(FrequentLabel f1, FrequentLabel f2) {						return f2.frequency - f1.frequency;					}				});								System.out.println("after sort = " +freqarr[0].label + "freq" +freqarr[0].frequency);								if(freqarr[0].label == pointIDsValidation.get(key).label) {					correct++;									}			}						accuracy = (double) correct/pointIDsValidation.size();			System.out.println("Accuracy = "+accuracy + " K = "+k);						if(max < correct) {				max = correct;				bestK = k;			}					}		accuracy = (double) max/pointIDsValidation.size();		System.out.println("Best Accuracy:"+accuracy + " Best k = "+bestK);	}		public void closestPoints () {					double dist;		PointDistance pd;		PointDistance[] pointarray;		int full = 0;		double max = 0;		int test = 0;		System.out.println("in closestpoints");		for(int k1 : pointIDsValidation.keySet()) {			if(closestPoints.containsKey(k1)) {				pointarray = closestPoints.get(k1);				full = 0;				for(int k2 : pointIDsTrain.keySet()) {					dist = getEuclidean(pointIDsValidation.get(k1).dimensions, pointIDsTrain.get(k2).dimensions);					//System.out.println("full = "+full);					if(full == kVals) {						//System.out.println("Pointarray = "+pointarray[19].euclid);						Arrays.sort(pointarray, new Comparator<PointDistance>() {							public int compare (PointDistance pd1, PointDistance pd2) {								return (int) (pd1.euclid - pd2.euclid);							}						});						System.out.println("the two distances = "+dist+" and "+pointarray[kVals - 1].euclid);						test++;						if(pointarray[kVals - 1].euclid > dist) {							pointarray[kVals - 1].euclid = dist;							pointarray[kVals - 1].id = k2;						}					} else {						test++;						pd = new PointDistance(k1, dist);						pointarray[full] = pd;												if(max < dist)							max = dist;						//System.out.println("max = "+max);						//System.out.println("Distance = "+pointarray[full].euclid);						full++;					}					closestPoints.put(k1, pointarray);				}			}		}				System.out.println("test = "+test);		//System.out.println("ClosestPoints points array = "+closestPoints.get(0).length);	}		public void readData() {		try {			BufferedReader br = new BufferedReader(new FileReader(filePath_train));			String line;			Point p;			ArrayList<Integer> dimensions;			int id = 0;			int label;			int test = 0;			String[] lineArr;			while((line = br.readLine()) != null) {				lineArr = line.split(",");				label = Integer.parseInt(lineArr[0]);				//System.out.println("label = "+label);				dimensions = new ArrayList<Integer>();				for(int i = 1; i < lineArr.length; i++) {					dimensions.add(Integer.parseInt(lineArr[i]));				}				p = new Point(id, label, dimensions);				pointIDsTrain.put(id, p);				id++; test++;				if(test > 50)					break;				System.out.println("in train = " + id + "size = " + pointIDsTrain.size());			}						test = 0;			//HashMap<Integer, Point> pointIDsValidation = new HashMap<Integer, Point>();			br = new BufferedReader(new FileReader(filePath_validation));			dimensions = new ArrayList<Integer>();			//test = 1;			while((line = br.readLine()) != null) {				lineArr = line.split(",");				label = Integer.parseInt(lineArr[0]);				for(int i = 1; i < lineArr.length; i++) {					dimensions.add(Integer.parseInt(lineArr[i]));				}				p = new Point(id, label, dimensions);				pointIDsValidation.put(id, p);				closestPoints.put(id, new PointDistance[kVals]);				id++;test++;				if(test > 50)					break;			}						System.out.println("Train size = "+pointIDsTrain.size());			System.out.println("Validation size = "+pointIDsValidation.size());		} catch (FileNotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	public double getEuclidean(List<Integer> point1, List<Integer> point2) {		double euclid = 0;		int val1, val2;		int prod = 0;		for(int k1 = 0; k1 < point1.size(); k1++) {			prod = 0;			if((val1 = point1.get(k1)) != 0) {				for(int k2 = 0; k2 < point2.size(); k2++) {					if((val2 = point2.get(k2)) != 0)						euclid = euclid + ((val1 - val2)*(val1 - val2));				}			}		}		euclid = Math.sqrt(euclid);		return euclid;	}}class Point {	int id;	int label;	ArrayList<Integer> dimensions = new ArrayList<Integer>();	PointDistance[] pointarray = new PointDistance[5];	public Point (int id, int label, ArrayList<Integer> dimensions) {		this.id = id;		this.label = label;		this.dimensions = dimensions;	}}class PointDistance {		int id;	double euclid;		public PointDistance(int id, double euclid) {		this.id = id;		this.euclid = euclid;	}}class FrequentLabel {	int label;	int frequency;		public FrequentLabel() {		this.label = 0;		this.frequency = 0;			}}